-- Create the sales_data database
CREATE DATABASE sales_data;
USE sales_data;

-- Create the customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    location VARCHAR(100)
);

-- Create the products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(100),
    price DECIMAL(10, 2)
);

-- Create the sales table
CREATE TABLE sales (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    sale_date DATE,
    quantity INT,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
-- Insert customers data
INSERT INTO customers (customer_id, name, age, location)
VALUES 
(1, 'Aarav', 30, 'Delhi'),
(2, 'Sanya', 24, 'Mumbai'),
(3, 'Rohit', 35, 'Bangalore'),
(4, 'Priya', 28, 'Chennai'),
(5, 'Vikram', 32, 'Kolkata'),
(6, 'Ananya', 26, 'Hyderabad'),
(7, 'Karan', 40, 'Pune'),
(8, 'Meera', 22, 'Ahmedabad'),
(9, 'Harsh', 38, 'Jaipur'),
(10, 'Nidhi', 29, 'Surat'),
(11, 'Arjun', 33, 'Lucknow'),
(12, 'Sneha', 27, 'Patna'),
(13, 'Varun', 31, 'Chandigarh'),
(14, 'Riya', 25, 'Indore'),
(15, 'Aman', 36, 'Nagpur'),
(16, 'Neha', 23, 'Bhopal'),
(17, 'Gaurav', 34, 'Visakhapatnam'),
(18, 'Isha', 21, 'Vadodara'),
(19, 'Rahul', 37, 'Guwahati'),
(20, 'Pooja', 28, 'Thiruvananthapuram');
-- Insert products data
INSERT INTO products (product_id, product_name, category, price)
VALUES
(1, 'Laptop', 'Electronics', 800.00),
(2, 'Smartphone', 'Electronics', 500.00),
(3, 'Tablet', 'Electronics', 300.00),
(4, 'Headphones', 'Accessories', 50.00),
(5, 'Smartwatch', 'Accessories', 150.00),
(6, 'Camera', 'Electronics', 1000.00),
(7, 'TV', 'Electronics', 1200.00),
(8, 'Mouse', 'Accessories', 25.00),
(9, 'Keyboard', 'Accessories', 45.00),
(10, 'Monitor', 'Electronics', 200.00);

-- Insert sales data
INSERT INTO sales (transaction_id, customer_id, product_id, sale_date, quantity, total_amount)
VALUES
(1, 1, 1, '2024-09-01', 1, 800.00),
(2, 2, 2, '2024-09-03', 1, 500.00),
(3, 3, 3, '2024-09-05', 2, 600.00),
(4, 4, 1, '2024-09-06', 1, 800.00),
(5, 5, 4, '2024-09-07', 3, 150.00),
(6, 6, 5, '2024-09-08', 2, 300.00),
(7, 7, 6, '2024-09-09', 1, 1000.00),
(8, 8, 7, '2024-09-10', 1, 1200.00),
(9, 9, 8, '2024-09-11', 4, 100.00),
(10, 10, 9, '2024-09-12', 2, 90.00),
(11, 11, 10, '2024-09-13', 1, 200.00),
(12, 12, 1, '2024-09-14', 1, 800.00),
(13, 13, 2, '2024-09-15', 1, 500.00),
(14, 14, 3, '2024-09-16', 1, 300.00),
(15, 15, 4, '2024-09-17', 5, 250.00),
(16, 16, 5, '2024-09-18', 2, 300.00),
(17, 17, 6, '2024-09-19', 1, 1000.00),
(18, 18, 7, '2024-09-20', 1, 1200.00),
(19, 19, 8, '2024-09-21', 2, 50.00),
(20, 20, 9, '2024-09-22', 1, 45.00);

-- Top Customers by Total Sales Amount-- 
SELECT c.name, SUM(s.total_amount) AS total_spent
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.name
ORDER BY total_spent DESC;

-- Customer Segmentation by Location-- 
SELECT location, COUNT(customer_id) AS total_customers
FROM customers
GROUP BY location;

 -- Query for Product Performance
-- Top Performing Products by Sales
SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC;

-- Sales by Product Category
SELECT p.category, SUM(s.total_amount) AS total_sales
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.category
ORDER BY total_sales DESC;


-- Query for Sales Trends
-- Monthly Sales Trends
SELECT DATE_FORMAT(sale_date, '%Y-%m') AS month, SUM(total_amount) AS monthly_sales
FROM sales
GROUP BY month
ORDER BY month ASC;

-- Peak Sales Periods
SELECT sale_date, SUM(total_amount) AS daily_sales
FROM sales
GROUP BY sale_date
ORDER BY daily_sales DESC
LIMIT 5;


-- Query for Location Analysis

-- Sales by Location
SELECT c.location, SUM(s.total_amount) AS total_sales
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.location
ORDER BY total_sales DESC;
-- Average Order Value by Location
SELECT c.location, AVG(s.total_amount) AS avg_order_value
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.location;

-- Customer Lifetime Value (CLV)
-- Calculate the total revenue generated by each customer over all transactions
SELECT c.customer_id, c.name, SUM(s.total_amount) AS lifetime_value
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id, c.name
ORDER BY lifetime_value DESC;


 -- Product Sales Ranking
--  Rank products based on total sales amount using window functions:

SELECT p.product_name, SUM(s.total_amount) AS total_sales,
       RANK() OVER (ORDER BY SUM(s.total_amount) DESC) AS sales_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id
GROUP BY p.product_name;

-- Customer Purchase Frequency
-- Determine how frequently each customer makes purchases:
SELECT c.customer_id, c.name, COUNT(s.transaction_id) AS purchase_count
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
GROUP BY c.customer_id, c.name
ORDER BY purchase_count DESC;

 -- Product Sales by Day of the Week
-- Analyze sales patterns based on the day of the week:

SELECT DAYNAME(s.sale_date) AS day_of_week, SUM(s.total_amount) AS total_sales
FROM sales s
GROUP BY day_of_week
ORDER BY FIELD(day_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');




